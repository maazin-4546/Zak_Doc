        const userPrompt = `You are an expert in document data extraction. Extract only the relevant fields from this invoice document and return a **valid JSON object**. The user may upload either a **multi-page PDF** or an **image (JPG, PNG, etc.)**, so ensure proper extraction of all details from the entire document.

        The invoice may be in **English or Arabic**. Extract the required details accurately, regardless of the language, and always return them in **English** while preserving the correct numerical values.
        
        üöÄ **Important Fixes for Arabic & English Extraction:**  
        ‚úî Ensure **Company Name** and **Vendor Name** are **not swapped**. Use context-based extraction:  
          - **Company Name**: Typically appears **at the top**, near the logo/header, or in sections labeled as **"Company Name" (EN), "ÿßÿ≥ŸÖ ÿßŸÑÿ¥ÿ±ŸÉÿ©" (AR)**.  
          - **Vendor Name**: Found in **billing sections**, under "Customer Name," "Billed To," or similar labels: **"ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ" (AR)**.  
        ‚úî **Invoice Number** detection improved by verifying it follows common formats (e.g., "INV-XXXX", "FAC-XXXX", numerical sequences).  
        ‚úî Ensure **currency is extracted correctly** alongside amounts without confusion.  
        ‚úî Fix **Arabic text mirroring issues** by handling right-to-left (RTL) text properly.
        ‚úî **Categorize the invoice based on its details**: Extract the category to determine the nature of the expense (e.g., Travel & Transportation, Shopping, Food & Beverages, Shopping & Retail, Office & Business Expenses, Medical & Healthcare, Housing & Rent, etc.).
        
        ---
        
        ### 1Ô∏è‚É£ **General Fields**
        - **"invoice_number"**: Extract the invoice number **only if labeled correctly**, ensuring it follows typical patterns such as:
          - **English**: "Invoice No.", "Bill No.", "Receipt No."
          - **Arabic**: "ÿ±ŸÇŸÖ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©"
          - **Avoid extracting order numbers, shipment numbers, or unrelated numeric strings.**
          
        - **"date"**: Extract the invoice date, ensuring it is labeled as:
          - **English**: "Invoice Date"
          - **Arabic**: "ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©"
          - Ignore unrelated dates like "Shipping Date" or "Due Date."
        
        - **"company_name"**: Extract the business/entity issuing the invoice:
          - Usually appears **at the top** of the document.
          - Ignore vendor/customer details in this field.
        
        - **"vendor_name"**: Extract the buyer/customer name:
          - Usually appears in sections labeled as **"Billed To," "Customer Name," "Sold To."**
          - Ignore company details in this field.
        
        - **"category"**: Extract the **category of the invoice** based on business type, vendor name, or purchased items.
          - Possible categories: **Travel & Transportation, Shopping, Food & Beverages, Shopping & Retail, Office & Business Expenses, Medical & Healthcare, Housing & Rent, etc.**
          - **Example Output:**
            --json
        "category": "Food & Beverages"
          
        
        ---
        
        ### 2Ô∏è‚É£ **Amount-Related Fields (Flexible Tax Handling)**
        - **"tax_amount"**: Extract all applicable taxes.
          - **If a single tax exists**, return it as a **string** (e.g., "‚Çπ2,974.27").
          - **If multiple tax types exist**, return them as a **structured string** by concatenating tax types with their values, ensuring JSON validity.
          - **Example Outputs:**
            --json
        "tax_amount": "‚Çπ2,974.27"      
            OR  
            --json
        "tax_amount": "CGST: ‚Çπ117.40, SGST: ‚Çπ117.40, IGST: ‚Çπ0.00"
    
          - **Ensure flexibility in data types** to avoid validation errors.
        
        - **"total"**: The **final amount** payable, including tax.
          - **Ensure the amount includes the correct currency.**
          - **Example Output:**  
            --json
        "total": "‚Çπ13715.52"
          
        
        ---
        
        ### 3Ô∏è‚É£ **Products Section**
        - **"products"**: Extract all items with:
          - **"product_name"**: Preserve exact item descriptions.
          - **"quantity"**: Extract only the **numeric value** from the quantity field. If the quantity contains units (e.g., "12 Nos", "15 Pcs"), remove non-numeric characters and return only the number.
          - **Example Outputs:**
            --json
        "quantity": 12
          
            --json
        "quantity": 15
          
          - **"unit_amount"**: Ensure amount **includes currency**.
          - **Example Output:**
            --json
        "unit_amount": "$9999"
          
            
        ---
        
        ### 4Ô∏è‚É£ **Multi-Page PDF Handling**
        - If the document is a **multi-page PDF**, extract details **across all pages**.
        - Ensure the output remains **consistent and structured**.
        
        ---
        
        ### 5Ô∏è‚É£ **Data Handling**
        ‚úî **Avoid Field Swapping**: Ensure company/vendor names are extracted correctly.  
        ‚úî **Prevent Incorrect Invoice Number Extraction**: Verify labels and formats.  
        ‚úî **Fix Arabic Mirroring Issues**: Handle RTL text properly.  
        ‚úî **Ensure JSON Validity**: No markdown, return only structured JSON.  
        ‚úî **Flexible Tax Handling**: Convert multi-tax objects into a structured string format to prevent validation errors.
        ‚úî **Ensure Numeric Quantity Extraction**: Convert quantity values to **numbers only** by removing unit labels like "Nos", "Pcs", etc.
        ‚úî **Classify the Invoice into a Relevant Category**: Extract and assign an appropriate category based on vendor name, company name, and purchased items.
        
        üöÄ **Expected Output Example:**
        --json
        {
          "invoice_number": "INV-12345",
            "date": "2024-02-20",
              "company_name": "Saffron Design",
                "vendor_name": "Priya Chopra",
                  "category": "Food & Beverages",
                    "tax_amount": "CGST: ‚Çπ117.40, SGST: ‚Çπ117.40, IGST: ‚Çπ0.00",
                      "total": "‚Çπ13715.52",
                        "products": [
                          { "product_name": "Frontend design restructure", "quantity": 12, "unit_amount": "$9999" },
                          { "product_name": "Backend API setup", "quantity": 15, "unit_amount": "‚Ç¨3000" }
                        ]
        }    
        
        Return **only JSON output**, with no explanations or additional text.`;




-------------------------------------------------------------------------------------------------------------



const userPrompt = `You are an expert in document data extraction. Extract only the relevant fields from this invoice document and return a **valid JSON object**. The user may upload either a **multi-page PDF** or an **image (JPG, PNG, etc.)**, so ensure proper extraction of all details from the entire document.

The invoice may be in **English, French, or Arabic**. Extract the required details accurately, regardless of the language, and always return them in **English** while preserving the correct numerical values.

üöÄ **Important Fixes for Arabic, French & English Extraction:**  
‚úî Ensure **Company Name** and **Vendor Name** are **not swapped**. Use context-based extraction:  
  - **Company Name**: Typically appears **at the top**, near the logo/header, or in sections labeled as **"Company Name" (EN), "Nom de l'entreprise" (FR), "ÿßÿ≥ŸÖ ÿßŸÑÿ¥ÿ±ŸÉÿ©" (AR)**.  
  - **Vendor Name**: Found in **billing sections**, under "Customer Name," "Billed To," or similar labels: **"Nom du client" (FR), "ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ" (AR)**.  
‚úî **Invoice Number** detection improved by verifying it follows common formats (e.g., "INV-XXXX", "FAC-XXXX", numerical sequences).  
‚úî Ensure **currency is extracted correctly** alongside amounts without confusion.  
‚úî Fix **Arabic text mirroring issues** by handling right-to-left (RTL) text properly.

---

### 1Ô∏è‚É£ **General Fields**
- **"invoice_number"**: Extract the invoice number **only if labeled correctly**, ensuring it follows typical patterns such as:
  - **English**: "Invoice No.", "Bill No.", "Receipt No."
  - **French**: "Num√©ro de facture", "Facture No."
  - **Arabic**: "ÿ±ŸÇŸÖ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©"
  - **Avoid extracting order numbers, shipment numbers, or unrelated numeric strings.**
  
- **"date"**: Extract the invoice date, ensuring it is labeled as:
  - **English**: "Invoice Date"
  - **French**: "Date de facture"
  - **Arabic**: "ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©"
  - Ignore unrelated dates like "Shipping Date" or "Due Date."

- **"company_name"**: Extract the business/entity issuing the invoice:
  - Usually appears **at the top** of the document.
  - Ignore vendor/customer details in this field.

- **"vendor_name"**: Extract the buyer/customer name:
  - Usually appears in sections labeled as **"Billed To," "Customer Name," "Sold To."**
  - Ignore company details in this field.

---

### 2Ô∏è‚É£ **Amount-Related Fields (Flexible Tax Handling)**
- **"tax_amount"**: Extract all applicable taxes.
  - **If a single tax exists**, return it as a **string** (e.g., "‚Çπ2,974.27").
  - **If multiple tax types exist**, return them as a **structured string** by concatenating tax types with their values, ensuring JSON validity.
  - **Example Outputs:**
    ```json
    "tax_amount": "‚Çπ2,974.27"
    ```
    OR  
    ```json
    "tax_amount": "CGST: ‚Çπ117.40, SGST: ‚Çπ117.40, IGST: ‚Çπ0.00"
    ```
  - **Ensure flexibility in data types** to avoid validation errors.

- **"total"**: The **final amount** payable, including tax.
  - **Ensure the amount includes the correct currency.**
  - **Example Output:**  
    ```json
    "total": "‚Çπ13715.52"
    ```

---

### 3Ô∏è‚É£ **Products Section**
- **"products"**: Extract all items with:
  - **"product_name"**: Preserve exact item descriptions.
  - **"quantity"**: Extract only the **numeric value** from the quantity field. If the quantity contains units (e.g., "12 Nos", "15 Pcs"), remove non-numeric characters and return only the number.
  - **Example Outputs:**
    ```json
    "quantity": 12
    ```
    ```json
    "quantity": 15
    ```
  - **"unit_amount"**: Ensure amount **includes currency**.
  - **Example Output:**
    ```json
    "unit_amount": "$9999"
    ```
    
---

### 4Ô∏è‚É£ **Multi-Page PDF Handling**
- If the document is a **multi-page PDF**, extract details **across all pages**.
- Ensure the output remains **consistent and structured**.

---

### 5Ô∏è‚É£ **Data Handling**
‚úî **Avoid Field Swapping**: Ensure company/vendor names are extracted correctly.  
‚úî **Prevent Incorrect Invoice Number Extraction**: Verify labels and formats.  
‚úî **Fix Arabic Mirroring Issues**: Handle RTL text properly.  
‚úî **Ensure JSON Validity**: No markdown, return only structured JSON.  
‚úî **Flexible Tax Handling**: Convert multi-tax objects into a structured string format to prevent validation errors.
‚úî **Ensure Numeric Quantity Extraction**: Convert quantity values to **numbers only** by removing unit labels like "Nos", "Pcs", etc.

üöÄ **Expected Output Example:**
```json
{
    "invoice_number": "INV-12345",
    "date": "2024-02-20",
    "company_name": "Saffron Design",
    "vendor_name": "Priya Chopra",
    "tax_amount": "CGST: ‚Çπ117.40, SGST: ‚Çπ117.40, IGST: ‚Çπ0.00",
    "total": "‚Çπ13715.52",
    "products": [
        { "product_name": "Frontend design restructure", "quantity": 12, "unit_amount": "$9999" },
        { "product_name": "Backend API setup", "quantity": 15, "unit_amount": "‚Ç¨3000" }
    ]
}
```

Return **only JSON output**, with no explanations or additional text.`;
